
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'D124A2E26DC24B2263F43AA1D3D18A12'
    
_lr_action_items = {'CONST':([0,47,],[4,4,]),'VAR':([0,3,5,16,47,],[-41,7,-4,-3,-41,]),'PROCEDURE':([0,3,5,6,8,16,27,47,],[-41,-41,-4,12,-8,-3,-7,-41,]),'ID':([0,3,4,5,6,7,8,11,12,13,16,17,21,22,23,24,27,28,31,36,39,41,42,45,47,52,53,55,56,57,58,59,60,61,62,63,64,65,68,78,],[-41,-41,10,-4,-41,15,-8,20,26,-12,-3,29,32,20,43,43,-7,48,43,43,43,-32,-33,43,-41,20,20,43,43,-23,-24,-25,-26,-27,-28,43,-36,-37,20,-11,]),'CALL':([0,3,5,6,8,11,13,16,22,27,47,52,53,68,78,],[-41,-41,-4,-41,-8,21,-12,-3,21,-7,-41,21,21,21,-11,]),'BEGIN':([0,3,5,6,8,11,13,16,22,27,47,52,53,68,78,],[-41,-41,-4,-41,-8,22,-12,-3,22,-7,-41,22,22,22,-11,]),'IF':([0,3,5,6,8,11,13,16,22,27,47,52,53,68,78,],[-41,-41,-4,-41,-8,23,-12,-3,23,-7,-41,23,23,23,-11,]),'WHILE':([0,3,5,6,8,11,13,16,22,27,47,52,53,68,78,],[-41,-41,-4,-41,-8,24,-12,-3,24,-7,-41,24,24,24,-11,]),'$end':([0,1,2,3,5,6,8,11,13,16,19,25,27,32,38,40,43,44,50,51,53,66,68,72,74,75,76,77,78,],[-41,0,-1,-41,-4,-41,-8,-41,-12,-3,-2,-18,-7,-14,-29,-34,-38,-39,-13,-15,-41,-30,-41,-16,-31,-35,-40,-17,-11,]),'SEMICOLON':([3,5,6,8,9,11,13,14,15,16,19,22,25,26,27,30,32,33,34,38,40,43,44,47,48,50,51,52,53,66,68,69,70,71,72,74,75,76,77,78,],[-41,-4,-41,-8,16,-41,-12,27,-9,-3,-2,-41,-18,47,-7,-5,-14,52,-19,-29,-34,-38,-39,-41,-10,-13,-15,-41,-41,-30,-41,78,-6,-20,-16,-31,-35,-40,-17,-11,]),'COMMA':([9,14,15,30,48,70,],[17,28,-9,-5,-10,-6,]),'ASSIGN':([10,29,37,38,40,43,44,66,74,75,76,],[18,49,57,-29,-34,-38,-39,-30,-31,-35,-40,]),'NUMBER':([18,23,24,31,36,39,41,42,45,49,55,56,57,58,59,60,61,62,63,64,65,],[30,44,44,44,44,44,-32,-33,44,70,44,44,-23,-24,-25,-26,-27,-28,44,-36,-37,]),'UPDATE':([20,],[31,]),'END':([22,25,32,33,34,38,40,43,44,50,51,52,53,66,68,71,72,74,75,76,77,],[-41,-18,-14,51,-19,-29,-34,-38,-39,-13,-15,-41,-41,-30,-41,-20,-16,-31,-35,-40,-17,]),'ODD':([23,24,],[36,36,]),'PLUS':([23,24,31,36,37,38,40,43,44,45,50,54,55,57,58,59,60,61,62,66,67,73,74,75,76,],[41,41,41,41,41,-29,-34,-38,-39,41,41,41,41,-23,-24,-25,-26,-27,-28,-30,41,41,-31,-35,-40,]),'MINUS':([23,24,31,36,37,38,40,43,44,45,50,54,55,57,58,59,60,61,62,66,67,73,74,75,76,],[42,42,42,42,42,-29,-34,-38,-39,42,42,42,42,-23,-24,-25,-26,-27,-28,-30,42,42,-31,-35,-40,]),'LPARENT':([23,24,31,36,39,41,42,45,55,56,57,58,59,60,61,62,63,64,65,],[45,45,45,45,45,-32,-33,45,45,45,-23,-24,-25,-26,-27,-28,45,-36,-37,]),'THEN':([35,38,40,43,44,54,66,73,74,75,76,],[53,-29,-34,-38,-39,-21,-30,-22,-31,-35,-40,]),'NE':([37,38,40,43,44,66,74,75,76,],[58,-29,-34,-38,-39,-30,-31,-35,-40,]),'LT':([37,38,40,43,44,66,74,75,76,],[59,-29,-34,-38,-39,-30,-31,-35,-40,]),'GT':([37,38,40,43,44,66,74,75,76,],[60,-29,-34,-38,-39,-30,-31,-35,-40,]),'LTE':([37,38,40,43,44,66,74,75,76,],[61,-29,-34,-38,-39,-30,-31,-35,-40,]),'GTE':([37,38,40,43,44,66,74,75,76,],[62,-29,-34,-38,-39,-30,-31,-35,-40,]),'DO':([38,40,43,44,46,54,66,73,74,75,76,],[-29,-34,-38,-39,68,-21,-30,-22,-31,-35,-40,]),'RPARENT':([38,40,43,44,66,67,74,75,76,],[-29,-34,-38,-39,-30,76,-31,-35,-40,]),'TIMES':([38,40,43,44,66,74,75,76,],[64,-34,-38,-39,64,64,-35,-40,]),'DIVIDE':([38,40,43,44,66,74,75,76,],[65,-34,-38,-39,65,65,-35,-40,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([0,47,],[2,69,]),'constDecl':([0,47,],[3,3,]),'empty':([0,3,6,11,22,47,52,53,68,],[5,8,13,25,25,5,25,25,25,]),'varDecl':([3,],[6,]),'constAssignmentList':([4,],[9,]),'procDecl':([6,],[11,]),'identList':([7,],[14,]),'statement':([11,22,52,53,68,],[19,34,71,72,77,]),'statementList':([22,],[33,]),'condition':([23,24,],[35,46,]),'expression':([23,24,31,36,45,55,],[37,37,50,54,67,73,]),'term':([23,24,31,36,39,45,55,56,],[38,38,38,38,66,38,38,74,]),'addingOperator':([23,24,31,36,37,45,50,54,55,67,73,],[39,39,39,39,56,39,56,56,39,56,56,]),'factor':([23,24,31,36,39,45,55,56,63,],[40,40,40,40,40,40,40,40,75,]),'relation':([37,],[55,]),'multiplyingOperator':([38,66,74,],[63,63,63,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','AnalizadorSintactico.py',22),
  ('block -> constDecl varDecl procDecl statement','block',4,'p_block','AnalizadorSintactico.py',27),
  ('constDecl -> CONST constAssignmentList SEMICOLON','constDecl',3,'p_constDecl','AnalizadorSintactico.py',34),
  ('constDecl -> empty','constDecl',1,'p_constDeclEmpty','AnalizadorSintactico.py',39),
  ('constAssignmentList -> ID ASSIGN NUMBER','constAssignmentList',3,'p_constAssignmentList1','AnalizadorSintactico.py',44),
  ('constAssignmentList -> constAssignmentList COMMA ID ASSIGN NUMBER','constAssignmentList',5,'p_constAssignmentList2','AnalizadorSintactico.py',49),
  ('varDecl -> VAR identList SEMICOLON','varDecl',3,'p_varDecl1','AnalizadorSintactico.py',56),
  ('varDecl -> empty','varDecl',1,'p_varDeclEmpty','AnalizadorSintactico.py',61),
  ('identList -> ID','identList',1,'p_identList1','AnalizadorSintactico.py',68),
  ('identList -> identList COMMA ID','identList',3,'p_identList2','AnalizadorSintactico.py',73),
  ('procDecl -> PROCEDURE ID SEMICOLON block SEMICOLON','procDecl',5,'p_procDecl1','AnalizadorSintactico.py',80),
  ('procDecl -> empty','procDecl',1,'p_procDeclEmpty','AnalizadorSintactico.py',85),
  ('statement -> ID UPDATE expression','statement',3,'p_statement1','AnalizadorSintactico.py',92),
  ('statement -> CALL ID','statement',2,'p_statement2','AnalizadorSintactico.py',97),
  ('statement -> BEGIN statementList END','statement',3,'p_statement3','AnalizadorSintactico.py',102),
  ('statement -> IF condition THEN statement','statement',4,'p_statement4','AnalizadorSintactico.py',107),
  ('statement -> WHILE condition DO statement','statement',4,'p_statement5','AnalizadorSintactico.py',112),
  ('statement -> empty','statement',1,'p_statementEmpty','AnalizadorSintactico.py',117),
  ('statementList -> statement','statementList',1,'p_statementList1','AnalizadorSintactico.py',124),
  ('statementList -> statementList SEMICOLON statement','statementList',3,'p_statementList2','AnalizadorSintactico.py',129),
  ('condition -> ODD expression','condition',2,'p_condition1','AnalizadorSintactico.py',136),
  ('condition -> expression relation expression','condition',3,'p_condition2','AnalizadorSintactico.py',141),
  ('relation -> ASSIGN','relation',1,'p_relation1','AnalizadorSintactico.py',148),
  ('relation -> NE','relation',1,'p_relation2','AnalizadorSintactico.py',153),
  ('relation -> LT','relation',1,'p_relation3','AnalizadorSintactico.py',158),
  ('relation -> GT','relation',1,'p_relation4','AnalizadorSintactico.py',163),
  ('relation -> LTE','relation',1,'p_relation5','AnalizadorSintactico.py',168),
  ('relation -> GTE','relation',1,'p_relation6','AnalizadorSintactico.py',173),
  ('expression -> term','expression',1,'p_expression1','AnalizadorSintactico.py',180),
  ('expression -> addingOperator term','expression',2,'p_expression2','AnalizadorSintactico.py',185),
  ('expression -> expression addingOperator term','expression',3,'p_expression3','AnalizadorSintactico.py',190),
  ('addingOperator -> PLUS','addingOperator',1,'p_addingOperator1','AnalizadorSintactico.py',197),
  ('addingOperator -> MINUS','addingOperator',1,'p_addingOperator2','AnalizadorSintactico.py',202),
  ('term -> factor','term',1,'p_term1','AnalizadorSintactico.py',209),
  ('term -> term multiplyingOperator factor','term',3,'p_term2','AnalizadorSintactico.py',214),
  ('multiplyingOperator -> TIMES','multiplyingOperator',1,'p_multiplyingOperator1','AnalizadorSintactico.py',221),
  ('multiplyingOperator -> DIVIDE','multiplyingOperator',1,'p_multiplyingOperator2','AnalizadorSintactico.py',226),
  ('factor -> ID','factor',1,'p_factor1','AnalizadorSintactico.py',233),
  ('factor -> NUMBER','factor',1,'p_factor2','AnalizadorSintactico.py',238),
  ('factor -> LPARENT expression RPARENT','factor',3,'p_factor3','AnalizadorSintactico.py',243),
  ('empty -> <empty>','empty',0,'p_empty','AnalizadorSintactico.py',248),
]
